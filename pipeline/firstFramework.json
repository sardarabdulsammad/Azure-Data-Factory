{
	"name": "firstFramework",
	"properties": {
		"activities": [
			{
				"name": "Lookupcontroltable",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT * FROM [dbo].[CNTLTBL] where Disable_load = '0'\n",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_sql_table_wisdomtechdb",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachRecordInControlTable",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Lookupcontroltable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookupcontroltable').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Lookupincremental",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT is_incremental FROM [dbo].[CNTLTBL] where table_name =\n'@{item().table_name}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_sql_table_wisdomtechdb",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "Ifactivity",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Lookupincremental",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@activity('Lookupincremental').output.value[0].Is_incremental",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Copy data1_copy1",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderQuery": {
													"value": "select * from @{item().schema_name}.@{item().table_name}",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobStorageWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "ls_incremental",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "ParquetSink",
												"type": "DatasetReference",
												"parameters": {
													"folder": "@item().path",
													"file": {
														"value": "@concat(item().schema_name,'_',item().table_name,'_',utcNow(),'.parquet')",
														"type": "Expression"
													}
												}
											}
										]
									}
								],
								"ifTrueActivities": [
									{
										"name": "Copy data1",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderQuery": {
													"value": "select * from @{item().schema_name}.@{item().table_name} where HireDate > '@{item().Current_value}'",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobStorageWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "ls_incremental",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "ParquetSink",
												"type": "DatasetReference",
												"parameters": {
													"folder": "@item().path",
													"file": {
														"value": "@concat(item().schema_name,'_',item().table_name,'_',utcNow(),'.parquet')",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Lookup1",
										"type": "Lookup",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderQuery": {
													"value": "@item().Incremental_query",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"dataset": {
												"referenceName": "ds_frame_maxquery",
												"type": "DatasetReference"
											},
											"firstRowOnly": false
										}
									},
									{
										"name": "Script1",
										"type": "Script",
										"dependsOn": [
											{
												"activity": "Lookup1",
												"dependencyConditions": [
													"Succeeded"
												]
											},
											{
												"activity": "Copy data1",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"linkedServiceName": {
											"referenceName": "ls_sql_tables",
											"type": "LinkedServiceReference"
										},
										"typeProperties": {
											"scripts": [
												{
													"type": "Query",
													"text": {
														"value": "update [dbo].[CNTLTBL] set \nCurrent_value = '@{activity('Lookup1').output.value[0].maxvalue}',Previous_value = '@{item().Current_value}' where table_name = '@{item().table_name}'",
														"type": "Expression"
													}
												}
											],
											"scriptBlockExecutionTimeout": "02:00:00"
										}
									}
								]
							}
						}
					]
				}
			}
		],
		"annotations": []
	}
}